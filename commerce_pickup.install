<?php

/**
 * @file
 * Commerce Pickup - Install
 */

/**
 * Implements hook_schema().
 */
function commerce_pickup_schema() {
  $schema['commerce_pickup_line_item'] = array(
    'description' => 'Maintains a link between a pickup line item and a pickup location entity.',
    'fields' => array(

      // Unique id of the pickup line item.
      'line_item_id' => array(
        'description' => 'The id of the line item this pickup pertains to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),

      // The pickup location entity type.
      'entity_type' => array(
        'description' => 'The pickup location entity type.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ),

      // The pickup location entity id.
      'entity_id' => array(
        'description' => 'The pickup location entity id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),

      // The label field is used to store the label of the entity
      // at the time that it was selected. This is useful if your
      // entities change their names, or are removed entirely, and
      // you want to make sure you don't lose the old label.
      'label' => array(
        'description' => 'The pickup location entity label.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'line_item_id' => array('line_item_id'),
      'entity' => array('entity_type', 'entity_id'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function commerce_pickup_uninstall() {

  // Delete variables.
  variable_del('commerce_pickup_location_entity');
  variable_del('commerce_pickup_service_display_title');
  variable_del('commerce_pickup_location_list_element');
  variable_del('commerce_pickup_location_list_description');
}

/**
 * Update to use individual shipping services.
 */
function commerce_pickup_update_7000(&$sandbox) {

  // Originally, this module provided a single shipping service.
  // This code updates it to a new scheme whereby a shipping service
  // is provided for each pickup location entity.

  // Load all entries from the {commerce_pickup_line_item} table.
  $query = db_select('commerce_pickup_line_item', 'p');
  $query->fields('p');
  $results = $query->execute();

  // Iterate through the results.
  foreach ($results as $result) {

    // Load the line item.
    $line_item = commerce_line_item_load($result->line_item_id);

    // Load the display title of the pickup services.
    $pickup_title = variable_get('commerce_pickup_service_display_title', 'Pickup');

    // Set the line item label to the new format.
    $line_item->line_item_label = t('@pickup at @location', array('@pickup' => $pickup_title, '@location' => $result->label));

    // Save the line item.
    commerce_line_item_save($line_item);
  }

  // Remove the old database table.
  db_drop_table('commerce_pickup_line_item');

  // Rebuild the menus.
  menu_rebuild();

  // Return a message.
  return t('Commerce Pickup has been updated to use individual shipping services.');
}

/**
 * Create the commerce_pickup_line_item table.
 */
function commerce_pickup_update_7001(&$sandbox) {

  // Add the {commerce_pickup_line_item} database table.
  $schema = array(
    'description' => 'Maintains a link between a pickup line item and a pickup location entity.',
    'fields' => array(
      'line_item_id' => array(
        'description' => 'The id of the line item this pickup pertains to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The pickup location entity type.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ),
      'entity_id' => array(
        'description' => 'The pickup location entity id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'label' => array(
        'description' => 'The pickup location entity label.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'line_item_id' => array('line_item_id'),
      'entity' => array('entity_type', 'entity_id'),
    ),
  );
  db_create_table('commerce_pickup_line_item', $schema);

  // Return a message.
  return t('Commerce Pickup Line Item table created.');
}

/**
 * Fix price components in existing line items.
 */
function commerce_pickup_update_7002(&$sandbox) {

  // Use the $sandbox to store the information needed to track progression between successive calls.
  if (!isset($sandbox['progress'])) {

    // Initialize the progress counter.
    $sandbox['progress'] = 0;

    // Count the number of line items in total.
    $query = db_select('commerce_line_item', 'cli');
    $query->addField('cli', 'line_item_id');
    $query->condition('type', 'shipping');
    $sandbox['max'] = $query->countQuery()->execute()->fetchField();
  }

  // Update 50 at a time.
  $limit = 50;

  // Retrieve the next group of line items.
  $query = db_select('commerce_line_item', 'cli');
  $query->fields('cli');
  $query->condition('type', 'shipping');
  $query->range($sandbox['progress'], $limit);
  $result = $query->execute();

  // Process the next chunk.
  foreach ($result as $line_item) {

    // Increment the progress counter.
    $sandbox['progress']++;

    // If the line item doesn't have a line item id, skip it.
    if (empty($line_item->line_item_id)) {
      continue;
    }

    // Unserialize the data.
    $line_item->data = unserialize($line_item->data);

    // If the line item isn't from the pickup module, skip it.
    if (!empty($line_item->data['shipping_service']['module']) && $line_item->data['shipping_service']['module'] != 'commerce_pickup') {
      continue;
    }

    // If the line item doesn't have a price component, skip it.
    if (empty($line_item->data['shipping_service']['price_component'])) {
      continue;
    }

    // Delete the price component.
    unset($line_item->data['shipping_service']['price_component']);

    // Save the line item record.
    drupal_write_record('commerce_line_item', $line_item, array('line_item_id'));

    // Load the line item total records from {field_data_commerce_total}.
    $query = db_select('field_data_commerce_total', 'fdct');
    $query->fields('fdct');
    $query->condition('entity_type', 'commerce_line_item');
    $query->condition('bundle', 'shipping');
    $query->condition('entity_id', $line_item->line_item_id);
    $result = $query->execute();

    // Process all the line item total records.
    foreach ($result as $line_item_total) {

      // Unserialize the data.
      $line_item_total->commerce_total_data = unserialize($line_item_total->commerce_total_data);

      // Iterate through the components.
      if (!empty($line_item_total->commerce_total_data['components'])) {
        foreach ($line_item_total->commerce_total_data['components'] as &$component) {

          // If the componenet name is 'pickup', replace it with the new name.
          if ($component['name'] == 'pickup') {
            $component['name'] = $line_item->data['shipping_service']['name'];
          }
        }
      }

      // Save the record.
      drupal_write_record('field_data_commerce_total', $line_item_total, array('entity_type', 'entity_id', 'deleted', 'delta', 'language'));
    }

    // Load the line item total revision records from {field_revision_commerce_total}.
    $query = db_select('field_revision_commerce_total', 'frct');
    $query->fields('frct');
    $query->condition('entity_type', 'commerce_line_item');
    $query->condition('bundle', 'shipping');
    $query->condition('entity_id', $line_item->line_item_id);
    $result = $query->execute();

    // Process all the line item revision total records.
    foreach ($result as $line_item_rev_total) {

      // Unserialize the data.
      $line_item_rev_total->commerce_total_data = unserialize($line_item_rev_total->commerce_total_data);

      // Iterate through the components.
      if (!empty($line_item_rev_total->commerce_total_data['components'])) {
        foreach ($line_item_rev_total->commerce_total_data['components'] as &$component) {

          // If the componenet name is 'pickup', replace it with the new name.
          if ($component['name'] == 'pickup') {
            $component['name'] = $line_item->data['shipping_service']['name'];
          }
        }
      }

      // Save the record.
      drupal_write_record('field_data_commerce_total', $line_item_total, array('entity_type', 'entity_id', 'revision_id', 'deleted', 'delta', 'language'));
    }
  }

  // Determine if we're finished or not.
  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
}
