<?php

/**
 * @file
 * Install and uninstall functions for the commerce_marketplace module.
 */

/**
 * Implements hook_install().
 */
function commerce_pickup_install() {
  $manager = \Drupal::entityTypeManager();
  $action = $manager->getStorage('action');
  $action->load('profile_publish_action')
    ->set('label', t('Set active'))->save();
  $action->load('profile_unpublish_action')
    ->set('label', t('Set inactive'))->save();

  $storage = $manager->getStorage('entity_view_display');
  $view_display = $storage->load("profile.customer.default");
  if ($address = $view_display->getComponent('address')) {
    $address['type'] = 'pickup_address_default';
    $view_display->setComponent('address', $address)->save();
  }

  $current_user = \Drupal::currentUser();
  if (!$current_user->isAnonymous() && ($id = $current_user->id())) {
    $current_user = $manager->getStorage('user')->load($id);
    $current_user->addRole('pickup_vendor');
    $current_user->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function commerce_pickup_uninstall() {
  // Do it only when you have a problem.
  // commerce_pickup_shipments_cleanup();
  $manager = \Drupal::entityTypeManager();

  foreach ($manager->getStorage('commerce_shipping_method')->loadMultiple() as $method) {
    if ($method->plugin->target_plugin_id == 'commerce_pickup_shipping_rate') {
      $method->delete();
    }
  }

  foreach ($manager->getStorage('profile')->loadByProperties(['type' => 'pickup']) as $profile) {
    $profile->delete();
  }

  if ($pickup = $manager->getStorage('profile_type')->load('pickup')) {
    $pickup->delete();
  }

  if ($pickup_checkout = $manager->getStorage('entity_view_mode')->load('profile.pickup_checkout')) {
    $pickup_checkout->delete();
  }

  if ($pickup_vendor = $manager->getStorage('user_role')->load('pickup_vendor')) {
    $pickup_vendor->delete();
  }

  foreach (['pickup_stores', 'pickup_points'] as $name) {
    if ($view = $manager->getStorage('view')->load($name)) {
      $view->delete();
    }
  }

  $action = $manager->getStorage('action');
  $action->load('profile_publish_action')
    ->set('label', t('Publish selected profile'))->save();
  $action->load('profile_unpublish_action')
    ->set('label', t('Unpublish selected profile'))->save();

  $storage = $manager->getStorage('entity_view_display');
  $view_display = $storage->load("profile.customer.default");
  if ($address = $view_display->getComponent('address')) {
    $address['type'] = 'address_default';
    $view_display->setComponent('address', $address)->save();
  }
}

/**
 * Cleanup broken shipments.
 *
 * @see https://www.drupal.org/node/3124399
 */
function commerce_pickup_shipments_cleanup($cart = 1, $offset = 2678400) {
  $method_storage = \Drupal::entityTypeManager()->getStorage('commerce_shipping_method');
  $order_storage = \Drupal::entityTypeManager()->getStorage('commerce_order');
  $ids = $order_storage->getQuery()
    // Default: one month.
    ->condition('changed', time() - $offset, '>')
    // Default: only carts cleanup.
    ->condition('cart', $cart, '=')
    ->execute();
  $orders = $order_storage->loadMultiple($ids);
  $methods = [];
  $pickup_plugin = 'commerce_pickup_shipping_rate';
  foreach ($orders as $order) {
    foreach ($order->shipments as $index => $shipment) {
      $id = $shipment->target_id;
      if (!isset($methods[$id])) {
        $methods[$id] = $method_storage->load($id);
      }
      if ($pickup = $methods[$id]) {
        $pickup = $methods[$id]->plugin->target_plugin_id == 'commerce_pickup_shipping_rate';
      }
      if ($pickup || !$methods[$id]) {
        $order->shipments->removeItem($index);
        $order->set('shipments', $order->shipments->get($index))->save();
      }
    }
  }
}
