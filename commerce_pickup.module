<?php

/**
 * @file
 * Allows you to define pickup locations for customers to choose during checkout.
 */

/****************************************************************
 * Drupal hooks
 * **************************************************************/

/**
 * Implements hook_menu().
 */
function commerce_pickup_menu() {

  // Root Theme Settings page.
  $items['admin/commerce/config/pickup'] = array(
    'title' => 'Pickup Settings',
    'description' => 'Commerce Pickup shipping method settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pickup_settings_form'),
    'access arguments' => array('administer store configuration'),
    'file' => 'commerce_pickup.admin.inc',
  );

  return $items;
}

/****************************************************************
 * Commerce hooks
 * **************************************************************/

/**
 * Implements hook_entity_insert().
 */
function commerce_pickup_entity_insert($entity, $type) {

  // If a pickup line item is being inserted...
  if ($type == 'commerce_line_item' && $entity->type == 'shipping' && $entity->data['shipping_service']['shipping_method'] == 'pickup') {

    // Generate record.
    $record = _commerce_pickup_line_item_record($entity);

    // Insert record into {commerce_pickup_line_item}.
    drupal_write_record('commerce_pickup_line_item', $record);
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_pickup_entity_update($entity, $type) {

  // If a pickup line item is being updated...
  if ($type == 'commerce_line_item' && $entity->type == 'shipping' && $entity->data['shipping_service']['shipping_method'] == 'pickup') {

    // Generate record.
    $record = _commerce_pickup_line_item_record($entity);

    // Update record in {commerce_pickup_line_item}.
    $query = db_update('commerce_pickup_line_item');
    $query->fields($record);
    $query->condition('line_item_id', $entity->line_item_id);
    $query->execute();
  }
}

/**
 * Implements hook_entity_delete().
 */
function commerce_pickup_entity_delete($entity, $type) {

  // If a pickup line item is being updated...
  if ($type == 'commerce_line_item' && $entity->type == 'shipping' && $entity->data['shipping_service']['shipping_method'] == 'pickup') {

    // Delete record from {commerce_pickup_line_item}.
    $query = db_delete('commerce_pickup_line_item');
    $query->condition('line_item_id', $entity->line_item_id);
    $query->execute();
  }
}

/****************************************************************
 * Commerce shipping hooks and callbacks
 * **************************************************************/

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_pickup_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['pickup'] = array(
    'title' => t('Pickup'),
    'description' => t('Allows you to define pickup locations for customers to choose during checkout.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_pickup_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['pickup'] = array(
    'title' => t('Pickup'),
    'description' => t('A list of active pickup locations to choose from.'),
    'display_title' => t(variable_get('commerce_pickup_service_display_title', 'Pickup')),
    'shipping_method' => 'pickup',
    'price_component' => 'pickup',
    'callbacks' => array(
      'rate' => 'commerce_pickup_service_rate',
      'details_form' => 'commerce_pickup_service_details_form',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_pickup_service_rate($shipping_service, $order) {
  return array(
    'amount' => 0,
    'currency_code' => 'USD',
    'data' => array(),
  );
}

/**
 * Shipping service callback: returns the pickup shipping service details form.
 */
function commerce_pickup_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();

  $pane_values['service_details'] += array(
    'location' => '',
  );

  $form['location'] = array(
    '#type' => variable_get('commerce_pickup_location_list_element', 'radios'),
    '#title' => t('Select a location...'),
    '#description' => t(variable_get('commerce_pickup_location_list_description', '')),
    '#options' => _commerce_pickup_location_options(),
    '#default_value' => $pane_values['service_details']['location'],
    '#required' => TRUE,
  );

  return $form;
}

/****************************************************************
 * Helper functions
 * **************************************************************/

/**
 * Helper function for generating a database record for the {commerce_pickup_line_item} table from a line item.
 *
 * @param $line_item
 *   The line item to extract entity information from.
 *
 * @return
 *   Returns a record array for insertion/update in the {commerce_pickup_line_item} table.
 */
function _commerce_pickup_line_item_record($line_item) {

  // If a location was selected...
  if (!empty($line_item->data['service_details']['location'])) {

    // Split the value to get the entity type, bundle, and entity id.
    $split = explode('__', $line_item->data['service_details']['location']);

    // If three items aren't available, bail.
    if (count($split) != 3) {
      return;
    }

    // Grab the entity type, bundle, and entity id.
    $entity_type = $split[0];
    $bundle = $split[1];
    $id = $split[2];

    // Load the entity.
    $entity = entity_load($entity_type, array($id));

    // Get the entity label.
    $label = entity_label($entity_type, reset($entity));

    // Save the entity information to the database.
    $record = array(
      'line_item_id' => $line_item->line_item_id,
      'entity_type' => $entity_type,
      'entity_id' => $id,
      'label' => $label,
    );

    // Return the record.
    return $record;
  }
}

/**
 * Helper function for generating a list of pickup location options.
 *
 * @return
 *   Returns an array of options for use in a form element.
 */
function _commerce_pickup_location_options() {
  $options = array();

  // Load the entity/bundle type setting.
  $entity_bundle = variable_get('commerce_pickup_location_entity', NULL);
  if ($entity_bundle) {

    // Split the entity/bundle into two separate variables.
    $split = explode('__', $entity_bundle);
    if (count($split == 2)) {
      $entity_type = $split[0];
      $bundle = $split[1];
    }
  }

  // If an entity and bundle were found, load all entities.
  if (!empty($entity_type) && !empty($bundle)) {

    // Start a new Entity Field Query.
    $query = new EntityFieldQuery();

    // Set the entity type and bundle.
    $query->entityCondition('entity_type', $entity_type);
    $query->entityCondition('bundle', $bundle);

    // Execute the query.
    $result = $query->execute();

    // Iterate through the results to build a list of entity titles.
    if (!empty($result)) {
      foreach ($result as $entity_type => $entities) {

        // If there are entities...
        if (!empty($entities)) {

          // Load entity info.
          $entity_info = entity_get_info($entity_type);

          // Iterate through the entities.
          foreach ($entities as $entity_id => $data) {

            // Get the entity id.
            $id = $data->$entity_info['entity keys']['id'];

            // Load the entities.
            $loaded_entities = entity_load($entity_type, array($id));

            // Alias the first (and only) entity.
            $entity = reset($loaded_entities);

            // Load the entity label.
            $entity_label = entity_label($entity_type, $entity);

            // Load the entity uri.
            $entity_uri = entity_uri($entity_type, $entity);

            // Add an option for the entity (using the entity's label).
            $options[$entity_bundle . '__' . $id] = l($entity_label, $entity_uri['path']);
          }
        }
      }
    }
  }

  // Return the array of options.
  return $options;
}
