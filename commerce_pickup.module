<?php

/**
 * @file
 * Allows you to define pickup locations for customers to choose during checkout.
 */

/****************************************************************
 * Drupal hooks
 * **************************************************************/

/**
 * Implements hook_menu().
 */
function commerce_pickup_menu() {

  // Commerce pickup settings page.
  $items['admin/commerce/config/pickup'] = array(
    'title' => 'Pickup Settings',
    'description' => 'Commerce Pickup shipping method settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pickup_settings_form'),
    'access arguments' => array('administer store configuration'),
    'file' => 'commerce_pickup.admin.inc',
  );

  // Pickup tab in admin order interface.
  $items['admin/commerce/orders/%commerce_order/pickup'] = array(
    'title' => 'Pickup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pickup_order_pickup_form', 3),
    'access callback' => 'commerce_pickup_order_access',
    'access arguments' => array('administer store configuration', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/****************************************************************
 * Commerce hooks
 * **************************************************************/

/**
 * Implements hook_entity_insert().
 */
function commerce_pickup_entity_insert($entity, $type) {

  // If a shipping line item is being inserted...
  if ($type == 'commerce_line_item' && $entity->type == 'shipping') {

    // If the line item is a pickup.
    if (!empty($entity->data['shipping_service']['shipping_method']) && $entity->data['shipping_service']['shipping_method'] == 'pickup') {

      // Generate record.
      $record = _commerce_pickup_line_item_record($entity);

      // Insert record into {commerce_pickup_line_item}.
      drupal_write_record('commerce_pickup_line_item', $record);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_pickup_entity_update($entity, $type) {

  // If a pickup line item is being updated...
  if ($type == 'commerce_line_item' && $entity->type == 'shipping' && $entity->data['shipping_service']['shipping_method'] == 'pickup') {

    // Generate record.
    $record = _commerce_pickup_line_item_record($entity);

    // Update record in {commerce_pickup_line_item}.
    $query = db_update('commerce_pickup_line_item');
    $query->fields($record);
    $query->condition('line_item_id', $entity->line_item_id);
    $query->execute();
  }
}

/**
 * Implements hook_entity_delete().
 */
function commerce_pickup_entity_delete($entity, $type) {

  // If a pickup line item is being updated...
  if ($type == 'commerce_line_item' && $entity->type == 'shipping' && $entity->data['shipping_service']['shipping_method'] == 'pickup') {

    // Delete record from {commerce_pickup_line_item}.
    $query = db_delete('commerce_pickup_line_item');
    $query->condition('line_item_id', $entity->line_item_id);
    $query->execute();
  }
}

/****************************************************************
 * Commerce shipping hooks and callbacks
 * **************************************************************/

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_pickup_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['pickup'] = array(
    'title' => t('Pickup'),
    'description' => t('Allows you to define pickup locations for customers to choose during checkout.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_pickup_commerce_shipping_service_info() {
  $shipping_services = array();

  // Load the entity/bundle type setting.
  $entity_bundle = variable_get('commerce_pickup_location_entity', NULL);
  if ($entity_bundle) {

    // Split the entity/bundle into two separate variables.
    $split = explode('__', $entity_bundle);
    if (count($split == 2)) {
      $entity_type = $split[0];
      $bundle = $split[1];
    }
  }

  // If an entity type and bundle are not available, bail.
  if (empty($entity_type) || empty($bundle)) {
    return $shipping_services;
  }

  // Start a new Entity Field Query.
  $query = new EntityFieldQuery();

  // Set the entity type and bundle.
  $query->entityCondition('entity_type', $entity_type);
  $query->entityCondition('bundle', $bundle);

  // Execute the query.
  $result = $query->execute();

  // Iterate through the results to build a list of shipping services.
  if (!empty($result)) {
    foreach ($result as $type => $entities) {

      // If there are entities...
      if (!empty($entities)) {

        // Load entity info.
        $entity_info = entity_get_info($type);

        // Iterate through the entities.
        foreach ($entities as $id => $data) {

          // Load the entities.
          $loaded_entities = entity_load($type, array($id));

          // Alias the first (and only) entity.
          $entity = reset($loaded_entities);

          // Load the entity label.
          $label = entity_label($type, $entity);

          // Load the display title of the pickup services.
          $pickup_title = variable_get('commerce_pickup_service_display_title', 'Pickup');

          // Define the shipping service for this location.
          $shipping_services['commerce_pickup__' . $type . '__' . $id] = array(
            'title' => t('@pickup at @location', array('@pickup' => $pickup_title, '@location' => $label)),
            'description' => t('Customer will pick up at @location', array('@location' => $label)),
            'display_title' => t('@pickup at @location', array('@pickup' => $pickup_title, '@location' => $label)),
            'shipping_method' => 'pickup',
            'price_component' => 'pickup',
            'callbacks' => array(
              'rate' => 'commerce_pickup_service_rate',
              'details_form' => 'commerce_pickup_service_details_form',
            ),
          );
        }
      }
    }
  }

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_pickup_service_rate($shipping_service, $order) {
  return array(
    'amount' => 0,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );
}

/**
 * Shipping service callback: returns the pickup shipping service details form.
 */
function commerce_pickup_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();

  // Add the pickup location to the service details array.
  $pane_values['service_details'] += array(
    'location' => '',
  );

  // Load the pickup location options.
  $options = _commerce_pickup_location_options();

  // Alias the default value.
  $default_value = $pane_values['service_details']['location'];

  // Location selection field.
  $form['location'] = array(
    '#type' => variable_get('commerce_pickup_location_list_element', 'radios'),
    '#title' => t('Select a location...'),
    '#description' => t(variable_get('commerce_pickup_location_list_description', '')),
    '#options' => $options,
    '#default_value' => !empty($default_value) ? $default_value : reset(array_keys($options)),
    '#required' => TRUE,
  );

  return $form;
}

/****************************************************************
 * Access callbacks
 * **************************************************************/

/**
 * Access callback for /admin/commerce/orders/%/pickup
 *
 * Checks to see if the order has pickup line items.
 *
 * @param $order
 *   The order to check.
 *
 * @return
 *   Returns TRUE if the order has pickup line items, FALSE otherwise.
 */
function commerce_pickup_order_access($string, $order, $account = NULL) {

  // Get the order's pickup line item.
  $line_item = _commerce_pickup_order_line_item($order);

  // If there is a pickup line item, return TRUE.
  if (!empty($line_item)) {
    return user_access($string, $account);
  }

  // Otherwise, return FALSE.
  return FALSE;
}

/****************************************************************
 * Form functions
 * **************************************************************/

/**
 * Pickup form in the order admin interface.
 */
function commerce_pickup_order_pickup_form($form, &$form_state, $order) {

  // Get the order's pickup line item.
  $line_item = _commerce_pickup_order_line_item($order);

  // If a line item was found, display form fields for it.
  if (!empty($line_item)) {

    // Store the line item in the form values.
    $form['line_item'] = array(
      '#type' => 'value',
      '#value' => $line_item,
    );

    // Load the available pickup location options.
    $options = _commerce_pickup_location_options();

    // Load the default value from the line item.
    $default_value = $line_item->data['service_details']['location'];

    // If the selected pickup location does not exist in the options, add it.
    // This covers the situations where pickup location entities have changed,
    // or been deleted. We want the selected location to remain, even if the
    // entity that it came from is gone (for reporting purposes).
    if (!array_key_exists($default_value, $options)) {

      // Load the pickup location label from the database.
      $query = db_select('commerce_pickup_line_item', 'p');
      $query->addField('p', 'label');
      $query->condition('line_item_id', $line_item->line_item_id);
      $label = $query->execute()->fetchField();

      $defaults = array(
        $default_value => $label . ' ' . t('(no longer exists)'),
      );
      $options = array_merge($defaults, $options);
    }

    // Pickup location
    $form['location'] = array(
      '#type' => variable_get('commerce_pickup_location_list_element', 'radios'),
      '#title' => t('Select a location...'),
      '#description' => t('This is the pickup location chosen by the customer.'),
      '#options' => $options,
      '#default_value' => $default_value,
      '#required' => TRUE,
    );

    // Submit button
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
    );
  }

  // Link back to the order view.
  $form['actions']['back'] = array(
    '#markup' => l(t('Cancel'), 'admin/commerce/orders/' . $order->order_id),
  );

  // Return the form.
  return $form;
}

/**
 * Submit function for commerce_pickup_order_pickup_form().
 */
function commerce_pickup_order_pickup_form_submit($form, &$form_state) {

  // If the location and line item are set...
  if (!empty($form_state['values']['location']) && !empty($form_state['values']['line_item'])) {

    // Alias the location and the line item.
    $location = $form_state['values']['location'];
    $line_item = $form_state['values']['line_item'];

    // If the location is not equal to the original location...
    if ($location != $line_item->data['service_details']['location']) {

      // Add the new value to the line item.
      $line_item->data['service_details']['location'] = check_plain($location);

      // Save the line item (this will automatically update the record in {commerce_pickup_line_item}).
      commerce_line_item_save($line_item);
    }
  }
}

/****************************************************************
 * Helper functions
 * **************************************************************/

/**
 * Helper function for extracting a pickup line item from an order.
 *
 * @todo
 *   At the moment we're assuming that only one pickup location is chosen, but in
 *   the future it would be nice to be able to support multiple (per-product perhaps).
 *   Right now, we just grab the last one.
 *
 * @param $order
 *   The Commerce Order object to look through.
 *
 * @return
 *   Returns a loaded Commerce Line Item object, NULL otherwise.
 */
function _commerce_pickup_order_line_item($order) {

  // If there are no line items, bail.
  if (empty($order->commerce_line_items)) {
    return;
  }

  // Generate an array of line item ids.
  $ids = array();
  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $item) {
    if (!empty($item['line_item_id'])) {
      $ids[] = $item['line_item_id'];
    }
  }

  // Load the line item objects.
  $line_items = commerce_line_item_load_multiple($ids);

  // Iterate through the line items to find the last pickup one.
  foreach ($line_items as $key => $line_item) {

    // If the line item is a pickup shipping service, remember it.
    if ($line_item->type == 'shipping' && $line_item->data['shipping_service']['shipping_method'] == 'pickup') {
      $id = $key;
    }
  }

  // If an id was found, return the line item.
  if (!empty($id)) {
    return $line_items[$id];
  }
}

/**
 * Helper function for parsing a pickup location value string.
 * Values will be in the form: [entity-type]__[bundle]__[entity-id]
 *
 * @param $value
 *   The pickup location value string to parse
 *
 * @return
 *   Returns an array with keys: 'entity_type', 'bundle', and 'id'.
 */
function _commerce_pickup_parse_location($value) {

  // Split the value to get the entity type, bundle, and entity id.
  $split = explode('__', $value);

  // If three items aren't available, bail.
  if (count($split) != 3) {
    return;
  }

  // Return an array of values.
  return array(
    'entity_type' => $split[0],
    'bundle' => $split[1],
    'id' => $split[2],
  );
}

/**
 * Helper function for generating a database record for the {commerce_pickup_line_item} table from a line item.
 *
 * @param $line_item
 *   The line item to extract entity information from.
 *
 * @return
 *   Returns a record array for insertion/update in the {commerce_pickup_line_item} table.
 */
function _commerce_pickup_line_item_record($line_item) {

  // If a location was selected...
  if (!empty($line_item->data['service_details']['location'])) {

    // Parse pickup location value.
    $data = _commerce_pickup_parse_location($line_item->data['service_details']['location']);

    // If the data is not available, bail.
    if (empty($data)) {
      return;
    }

    // Load the entity.
    $entity = entity_load($data['entity_type'], array($data['id']));

    // Get the entity label.
    $label = entity_label($data['entity_type'], reset($entity));

    // Save the entity information to the database.
    $record = array(
      'line_item_id' => $line_item->line_item_id,
      'entity_type' => $data['entity_type'],
      'entity_id' => $data['id'],
      'label' => $label,
    );

    // Return the record.
    return $record;
  }
}

/**
 * Helper function for generating a list of pickup location options.
 *
 * @return
 *   Returns an array of options for use in a form element.
 */
function _commerce_pickup_location_options() {
  $options = array();

  // Load the entity/bundle type setting.
  $entity_bundle = variable_get('commerce_pickup_location_entity', NULL);
  if ($entity_bundle) {

    // Split the entity/bundle into two separate variables.
    $split = explode('__', $entity_bundle);
    if (count($split == 2)) {
      $entity_type = $split[0];
      $bundle = $split[1];
    }
  }

  // If an entity and bundle were found, load all entities.
  if (!empty($entity_type) && !empty($bundle)) {

    // Start a new Entity Field Query.
    $query = new EntityFieldQuery();

    // Set the entity type and bundle.
    $query->entityCondition('entity_type', $entity_type);
    $query->entityCondition('bundle', $bundle);

    // Execute the query.
    $result = $query->execute();

    // Iterate through the results to build a list of entity titles.
    if (!empty($result)) {
      foreach ($result as $entity_type => $entities) {

        // If there are entities...
        if (!empty($entities)) {

          // Load entity info.
          $entity_info = entity_get_info($entity_type);

          // Iterate through the entities.
          foreach ($entities as $entity_id => $data) {

            // Get the entity id.
            $id = $data->$entity_info['entity keys']['id'];

            // Load the entities.
            $loaded_entities = entity_load($entity_type, array($id));

            // Alias the first (and only) entity.
            $entity = reset($loaded_entities);

            // Load the entity label.
            $entity_label = entity_label($entity_type, $entity);

            // Load the entity uri.
            $entity_uri = entity_uri($entity_type, $entity);

            // Add an option for the entity (using the entity's label). If it's a radio list, display it as a link.
            if (variable_get('commerce_pickup_location_list_element', 'radios') == 'radios') {
              $options[$entity_bundle . '__' . $id] = l($entity_label, $entity_uri['path']);
            }
            else {
              $options[$entity_bundle . '__' . $id] = $entity_label;
            }
          }
        }
      }
    }
  }

  // Return the array of options.
  return $options;
}
