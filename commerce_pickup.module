<?php

/**
 * @file
 * Allows you to define pickup locations for customers to choose during checkout.
 */

/****************************************************************
 * Drupal hooks
 * **************************************************************/

/**
 * Implements hook_menu().
 */
function commerce_pickup_menu() {

  // Commerce pickup settings page.
  $items['admin/commerce/config/pickup'] = array(
    'title' => 'Pickup Settings',
    'description' => 'Commerce Pickup shipping method settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pickup_settings_form'),
    'access arguments' => array('administer store configuration'),
    'file' => 'commerce_pickup.admin.inc',
  );

  return $items;
}

/****************************************************************
 * Commerce shipping hooks and callbacks
 * **************************************************************/

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_pickup_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['pickup'] = array(
    'title' => t('Pickup'),
    'description' => t('Allows you to define pickup locations for customers to choose during checkout.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_pickup_commerce_shipping_service_info() {
  $shipping_services = array();

  // Load the entity/bundle type setting.
  $entity_bundle = variable_get('commerce_pickup_location_entity', NULL);
  if ($entity_bundle) {

    // Split the entity/bundle into two separate variables.
    $split = explode('__', $entity_bundle);
    if (count($split == 2)) {
      $entity_type = $split[0];
      $bundle = $split[1];
    }
  }

  // If an entity type and bundle are not available, bail.
  if (empty($entity_type) || empty($bundle)) {
    return $shipping_services;
  }

  // Start a new Entity Field Query.
  $query = new EntityFieldQuery();

  // Set the entity type and bundle.
  $query->entityCondition('entity_type', $entity_type);
  $query->entityCondition('bundle', $bundle);

  // Execute the query.
  $result = $query->execute();

  // Iterate through the results to build a list of shipping services.
  if (!empty($result)) {
    foreach ($result as $type => $entities) {

      // If there are entities...
      if (!empty($entities)) {

        // Load entity info.
        $entity_info = entity_get_info($type);

        // Iterate through the entities.
        foreach ($entities as $id => $data) {

          // Load the entities.
          $loaded_entities = entity_load($type, array($id));

          // Alias the first (and only) entity.
          $entity = reset($loaded_entities);

          // Load the entity label.
          $label = entity_label($type, $entity);

          // Load the display title of the pickup services.
          $pickup_title = variable_get('commerce_pickup_service_display_title', 'Pickup');

          // Define the shipping service for this location.
          $shipping_services['commerce_pickup__' . $type . '__' . $id] = array(
            'title' => t('@pickup at @location', array('@pickup' => $pickup_title, '@location' => $label)),
            'description' => t('Customer will pick up at @location', array('@location' => $label)),
            'display_title' => t('@pickup at @location', array('@pickup' => $pickup_title, '@location' => $label)),
            'shipping_method' => 'pickup',
            'price_component' => 'pickup',
            'callbacks' => array(
              'rate' => 'commerce_pickup_service_rate',
            ),
          );
        }
      }
    }
  }

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_pickup_service_rate($shipping_service, $order) {
  return array(
    'amount' => 0,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );
}

/****************************************************************
 * Helper functions
 * **************************************************************/

/**
 * Helper function for extracting a pickup line item from an order.
 *
 * @todo
 *   At the moment we're assuming that only one pickup location is chosen, but in
 *   the future it would be nice to be able to support multiple (per-product perhaps).
 *   Right now, we just grab the last one.
 *
 * @param $order
 *   The Commerce Order object to look through.
 *
 * @return
 *   Returns a loaded Commerce Line Item object, NULL otherwise.
 */
function _commerce_pickup_order_line_item($order) {

  // If there are no line items, bail.
  if (empty($order->commerce_line_items)) {
    return;
  }

  // Generate an array of line item ids.
  $ids = array();
  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $item) {
    if (!empty($item['line_item_id'])) {
      $ids[] = $item['line_item_id'];
    }
  }

  // Load the line item objects.
  $line_items = commerce_line_item_load_multiple($ids);

  // Iterate through the line items to find the last pickup one.
  foreach ($line_items as $key => $line_item) {

    // If the line item is a pickup shipping service, remember it.
    if ($line_item->type == 'shipping' && $line_item->data['shipping_service']['shipping_method'] == 'pickup') {
      $id = $key;
    }
  }

  // If an id was found, return the line item.
  if (!empty($id)) {
    return $line_items[$id];
  }
}

/**
 * Helper function for parsing a pickup location value string.
 * Values will be in the form: commerce_pickup__[entity-type]__[entity-id]
 *
 * @param $value
 *   The pickup location value string to parse
 *
 * @return
 *   Returns an array with keys: 'entity_type' and 'id'.
 */
function _commerce_pickup_parse_location($value) {

  // Split the value to get the entity type, bundle, and entity id.
  $split = explode('__', $value);

  // If three items aren't available, bail.
  if (count($split) != 3) {
    return;
  }

  // Return an array of values.
  return array(
    'entity_type' => $split[1],
    'id' => $split[2],
  );
}
